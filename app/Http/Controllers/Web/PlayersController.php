<?php

namespace App\Http\Controllers\Web;

use App\Http\Controllers\Controller;
use App\Models\GameRound;
use App\Models\Player;
use App\Models\PlayerConnection;
use App\Models\PlayerHighscore;
use App\Models\PlayerParticipation;
use App\Models\PlayersOnline;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;
use Inertia\Inertia;

class PlayersController extends Controller
{
    public function index(Request $request)
    {
        // Data generated by CacheGlobalPlayStats daily job
        $participations = Cache::get('unique_player_participations_per_day', []);
        $playersByCountry = Cache::get('players_by_country', []);

        $playerCount = DB::selectOne(DB::raw('SELECT reltuples AS estimate FROM pg_class where relname = \'players\';'));

        $mostPlayersOnline = PlayersOnline::select(
            DB::raw('sum(online) as total_online'),
            'created_at'
        )
            ->groupBy('created_at')
            ->orderBy('total_online', 'desc')
            ->first();
        $mostPlayersOnline = $mostPlayersOnline ? $mostPlayersOnline->total_online : 0;

        $averagePlayersOnline = PlayersOnline::select(
            DB::raw('avg(online) as average_online')
        )->first();
        $averagePlayersOnline = $averagePlayersOnline->average_online;

        return Inertia::render('Players/Index', [
            'participations' => $participations,
            'playersByCountry' => $playersByCountry,
            'totalPlayers' => (int) $playerCount->estimate,
            'mostPlayersOnline' => (int) $mostPlayersOnline,
            'averagePlayersOnline' => (int) $averagePlayersOnline,
        ]);
    }

    public function highscores(Request $request)
    {
        $types = PlayerHighscore::select('type')
            ->distinct('type')
            ->orderBy('type', 'asc')
            ->pluck('type');

        $filters = $request->input('filters', []);
        if (! array_key_exists('type', $filters) && count($types)) {
            $filters['type'] = $types[0];
        }

        $highscores = PlayerHighscore::join('players', 'players.id', '=', 'player_highscores.player_id')
            ->filter($filters)
            ->orderBy(
                $request->input('sort_by', 'value'),
                $request->input('descending', 'true') === 'true' ? 'desc' : 'asc'
            )
            ->select(
                DB::raw('ROW_NUMBER () OVER (ORDER BY "value" desc) as position'),
                'player_highscores.*',
                'players.ckey',
                'players.key'
            )
            ->paginateFilter($request->input('per_page', 10));

        if ($this->wantsInertia($request)) {
            return Inertia::render('Players/Highscores', [
                'highscores' => $highscores,
                'types' => $types,
                'filteredType' => isset($filters['type']) ? $filters['type'] : null,
            ]);
        } else {
            return $highscores;
        }
    }

    public function search(Request $request)
    {
        $players = Player::with([
                'latestConnection' => function($q) {
                    $q->whereRelation('gameRound', 'ended_at', '!=', null)
                        ->whereRelation('gameRound.server', 'invisible', '!=', true);
                },
            ])
            ->filter($request->input('filters', []))
            ->orderBy(
                $request->input('sort_by', 'id'),
                $request->input('descending', 'true') === 'true' ? 'desc' : 'asc'
            )
            ->paginateFilter($request->input('per_page', 15));

        if ($this->wantsInertia($request)) {
            return Inertia::render('Players/Search', [
                'players' => $players,
            ]);
        } else {
            return $players;
        }
    }

    public function show(Request $request, int $player)
    {
        $player = Player::with([
            'latestConnection' => function($q) {
                $q->select('id', 'player_id', 'created_at', 'round_id')
                    ->whereRelation('gameRound', 'ended_at', '!=', null)
                    ->whereRelation('gameRound.server', 'invisible', '!=', true);
            },
            'firstConnection:id,player_id,created_at',
            'playtime',
        ])
            ->withCount([
                'connections',
                'participations',
                'deaths',
            ])
            ->where('id', $player)
            ->first();

        $favoriteJob = PlayerParticipation::select('job')
            ->selectRaw('count(id) as played_job')
            ->where('job', '!=', null)
            ->where('player_id', $player->id)
            ->groupBy('job')
            ->orderBy('played_job', 'desc')
            ->first();

        $latestRound = null;
        if ($player->latestConnection && $player->latestConnection->round_id) {
            $latestRound = GameRound::with(['latestStationName'])
                ->where('id', $player->latestConnection->round_id)
                ->first();
        }

        return Inertia::render('Players/Show', [
            'player' => $player,
            'latestRound' => $latestRound,
            'favoriteJob' => $favoriteJob ? $favoriteJob->job : null
        ]);
    }
}
